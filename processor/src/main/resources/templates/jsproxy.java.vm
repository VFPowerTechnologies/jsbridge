package $package;

import $originalFDQN;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import com.vfpowertech.jsbridge.core.dispatcher.Dispatcher;

@javax.annotation.Generated("jsbridge")
public final class $className implements com.vfpowertech.jsbridge.core.dispatcher.JSProxy {
    private Logger log = LoggerFactory.getLogger(${className}.class);
    private $originalClassName service;
    private Dispatcher dispatcher;
    private ObjectMapper objectMapper = new ObjectMapper();

    public ${className}($originalClassName service, Dispatcher dispatcher) {
        this.service = service;
        this.dispatcher = dispatcher;

        InjectableValues.Std injectableValues = new InjectableValues.Std();
        injectableValues.addValue(Dispatcher.class, dispatcher);
        objectMapper.setInjectableValues(injectableValues);
    }

    @Override
    public void call(String methodName, String methodArgs, String callbackId) {
    #foreach($m in $methods)
        if (methodName.equals("${m.name}")) {
            #if($m.hasArgs)
                ${m.argsType} args;
                try {
                    args = objectMapper.readValue(methodArgs, ${m.argsType}.class);
                }
                catch (Exception e) {
                    throw new RuntimeException(e);
                }
            #end
            #if($m.hasRetVal)
            ${m.retType} value =
            #end
            service.${m.name}(
                #foreach($a in ${m.argNames})
                args.$a
                #if($foreach.hasNext),#end
                #end
            );
            #if($m.hasRetVal)
            String json;
            try {
                json = objectMapper.writeValueAsString(value);
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
            #end

            dispatcher.sendValueBackToJS(callbackId,
                #if($m.hasRetVal)
                json
                #else
                null
                #end
            );

            return;
        }
    #end
        //TODO send error back to js with proper exception
        log.error("Unknown method: {} for callbackId={}", methodName, callbackId);
    }
}

