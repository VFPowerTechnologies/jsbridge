package $package;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import com.vfpowertech.jsbridge.core.dispatcher.Dispatcher;
import kotlin.jvm.functions.Function1;
import kotlin.Unit;
import nl.komponents.kovenant.Kovenant;
import nl.komponents.kovenant.Promise;
import nl.komponents.kovenant.Deferred;
import nl.komponents.kovenant.KovenantApi;

@javax.annotation.Generated("jsbridge")
public class $className implements $serviceInterface {
    private Dispatcher dispatcher;
    private ObjectMapper objectMapper = new ObjectMapper();
    private Logger log = LoggerFactory.getLogger(${className}.class);

    public $className(Dispatcher dispatcher) {
        this.dispatcher = dispatcher;
    }

    #foreach($m in $methods)
    @Override
    public Promise<${m.returnType}, Exception> ${m.name}(
    #foreach($p in $m.params)
        ${p.type} ${p.name}
    #if($foreach.hasNext),#end
    #end
    ) {
        #if(!$m.params.isEmpty())
            #set($argsClassName = $utils.getMethodArgsClassName($m))
            $argsClassName args = new $argsClassName();
            #foreach($p in $m.params)
                args.${p.name} = ${p.name};
            #end

            String jsonArgs;
            try {
                jsonArgs = objectMapper.writeValueAsString(args);
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
        #else
            String jsonArgs = "[]";
        #end

        Deferred<$m.returnType, Exception> deferred = KovenantApi.deferred(Kovenant.INSTANCE.getContext());

        Function1<String, Unit> resolve = (jsonReturnVal) -> {
            $m.returnType returnVal;
            try {
                //since we're most likely calling into kotlin code, we need to make sure this isn't null
                //for java's Void we're ok with null
                #if($m.returnType.toString() == "kotlin.Unit")
                    returnVal = kotlin.Unit.INSTANCE;
                #else
                    returnVal = objectMapper.readValue(jsonReturnVal, ${m.returnType}.class);
                #end
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
            deferred.resolve(returnVal);
            return null;
        };

        Function1<String, Unit> reject = (jsonExc) -> {
            //TODO
            deferred.reject(new RuntimeException(jsonExc));
            return null;
        };

        dispatcher.callJS("window.$serviceName", "$m.name", jsonArgs, resolve, reject);

        return deferred.getPromise();
    }
    #end
}