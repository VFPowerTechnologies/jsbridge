package $package;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.vfpowertech.jsbridge.core.dispatcher.Dispatcher;

@javax.annotation.Generated("jsbridge")
@JsonDeserialize(using = ${className}.Deserializer.class)
public final class $className implements $functionSig {
    public static final class Deserializer extends JsonDeserializer<$className> {
        @Override
        public $className deserialize(JsonParser jp, DeserializationContext ctxt) throws java.io.IOException, JsonProcessingException {
            Dispatcher dispatcher = (Dispatcher) ctxt.findInjectableValue(Dispatcher.class.getName(), null, null);
            return new ${className}(jp.getValueAsString(), dispatcher);
        }
    }

    private final String callbackId;
    private final Dispatcher dispatcher;

    private $className(final String callbackId, final Dispatcher dispatcher) {
        this.callbackId = callbackId;
        this.dispatcher = dispatcher;
    }

    @Override
    public $retType invoke(
    #if($argType)
    final ${argType} arg0
    #end
    ) {
        //hack to bypass checked exceptions
        try {
            final ObjectMapper objectMapper = new ObjectMapper();
            #if($argType)
            final String json = objectMapper.writeValueAsString(arg0);
            dispatcher.sendValueBackToJS(callbackId, json, false, null, null);
            #else
            dispatcher.sendValueBackToJS(callbackId, null, false, null, null);
            #end
        }
        catch (Exception e) {
            throw new RuntimeException(e);
        }
        return null;
    }
}
