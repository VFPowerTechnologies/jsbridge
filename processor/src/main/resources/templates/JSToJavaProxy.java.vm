package $package;

import $originalFDQN;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import kotlin.jvm.functions.Function1;
import kotlin.Unit;
import com.vfpowertech.jsbridge.core.dispatcher.Dispatcher;
import static com.vfpowertech.jsbridge.core.dispatcher.Utils.exceptionToJSONString;

#macro(sendValueToJS $hasReturnValue)
    #if($hasReturnValue)
    String json;
    try {
        json = objectMapper.writeValueAsString(value);
    }
    catch (Exception e) {
        log.error("Unable to serialize value for callbackId={}: {}", callbackId, e.getMessage(), e);
        throw new RuntimeException(e);
    }
    #end

    dispatcher.sendValueBackToJS(callbackId,
        #if($hasReturnValue)
        json,
        #else
        null,
        #end
        false
    );
#end

#macro(sendExceptionToJS)
    try {
        String json = exceptionToJSONString(e);
        dispatcher.sendValueBackToJS(callbackId, json, true);
    }
    catch (Exception e2) {
        log.error("Unable to serialize exception for callbackId={}: {}", callbackId, e2.getMessage(), e2);
    }
#end

@javax.annotation.Generated("jsbridge")
public final class $className implements com.vfpowertech.jsbridge.core.dispatcher.JSProxy {
    private final Logger log = LoggerFactory.getLogger(${className}.class);
    private final $originalClassName service;
    private final Dispatcher dispatcher;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public ${className}($originalClassName service, Dispatcher dispatcher) {
        this.service = service;
        this.dispatcher = dispatcher;

        InjectableValues.Std injectableValues = new InjectableValues.Std();
        injectableValues.addValue(Dispatcher.class, dispatcher);
        objectMapper.setInjectableValues(injectableValues);
    }

    @Override
    public String getName() {
        return "$jsClassName";
    }

    @Override
    public void call(String methodName, String methodArgs, final String callbackId) {
    #foreach($m in $methods)
        if (methodName.equals("${m.name}")) {
            #if($m.hasArgs)
                ${m.argsType} args;
                try {
                    args = objectMapper.readValue(methodArgs, ${m.argsType}.class);
                }
                catch (Exception e) {
                    #sendExceptionToJS()
                    return;
                }
            #end
            try {
                #if(!$m.returnsPromise)
                    #if($m.hasReturnValue)
                    ${m.returnType} value =
                    #end
                    service.${m.name}(
                        #foreach($a in ${m.argNames})
                        args.$a
                        #if($foreach.hasNext),#end
                        #end
                    );

                    #sendValueToJS($m.hasReturnValue)
                #else
                    ${m.returnType} promise = service.${m.name}(
                        #foreach($a in ${m.argNames})
                        args.$a
                        #if($foreach.hasNext),#end
                        #end
                    );

                    Function1<$m.promiseReturnType, Unit> successHandler = new Function1<$m.promiseReturnType, Unit>() {
                        @Override
                        public Unit invoke($m.promiseReturnType value) {
                            #sendValueToJS($m.hasReturnValue)
                            return kotlin.Unit.INSTANCE;
                        }
                    };

                    Function1<Exception, Unit> failHandler = new Function1<Exception, Unit>() {
                        @Override
                        public Unit invoke(Exception e) {
                            #sendExceptionToJS()
                            return kotlin.Unit.INSTANCE;
                        }
                    };

                    promise.success(successHandler).fail(failHandler);
                #end
            }
            catch (Exception e) {
                #sendExceptionToJS()
            }

            return;
        }
    #end
        //TODO send error back to js with proper exception
        log.error("Unknown method: {} for callbackId={}", methodName, callbackId);
    }
}

